{"version":3,"sources":["components/Emoji.js","components/Sorting.js","components/Edit.js","components/Task.js","components/Tasks.js","components/FormsControl.js","components/validte.js","components/AdminLoginForm.js","components/CreateTaskForm.js","components/StartingPage.js","api/api.js","store/reducers/tasksReducer.js","components/StartingPageContainer.js","App.js","serviceWorker.js","store/store.js","index.js","store/images/edit.png"],"names":["Emoji","props","className","role","aria-label","label","aria-hidden","symbol","Sorting","toggleSortMode","sortType","sortDirection","saveSort","getTasks","currentPage","setCurrentPage","chooseDirection","sortOption","onClick","Task","src","edit","alt","React","memo","status","isEdited","useState","text","setText","toggleEditMode","id","enterEditMode","editModeId","isAdmin","Edit","editTask","authToken","htmlFor","username","email","type","value","name","onChange","event","changeTextBody","target","defaultChecked","ids","some","el","idsEditedByAdmin","Tasks","useEffect","pagesCount","Math","ceil","totalTasksCount","pageSize","pages","i","push","tasks","map","key","index","undefined","page","Textarea","input","meta","hasError","touched","error","TextInput","requiredField","ReduxAdminLoginForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","ReduxCreateTaskForm","StartingPage","exitAdminMode","formData","logAsAdmin","closeMessages","feedbackOnAdminLogIn","createNewTask","feedbackOnCreation","instance","axios","baseURL","developer","tasksAPI","sortField","get","then","response","data","FormData","append","post","res","password","token","stringName","findObjectById","array","forEach","arrIndex","saveInLocalStorage","localStorage","setItem","initialState","getItem","enterAdminMode","adminLoggedIn","showFeedbackOnCreation","feedback","tasksReducer","state","action","tasksCount","stateCopy","StartingPageContainer","connect","tasksPage","dispatch","message","total_task_count","result","addToEditedIds","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c8b462f0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\n\r\nexport default Emoji;","import React from 'react';\r\nimport Emoji from './Emoji.js';\r\n\r\nconst Sorting = (props) => {\r\n\tconst [userOption, emailOption, statusOption] = ['username', 'email', 'status'];\r\n\tconst toggleSortMode = (sortType, sortDirection) => {\r\n\t\tprops.saveSort(sortType, sortDirection);\r\n\t\tprops.getTasks(sortType, sortDirection, props.currentPage);\r\n\t\tprops.setCurrentPage(1);\r\n\t}\r\n\r\n\tconst chooseDirection = (sortOption) => {\r\n\t\tif (props.sortType === sortOption) {\r\n\t\t\treturn !props.sortDirection || props.sortDirection === 'desc' ? 'asc' : 'desc';\r\n\t\t} else {\t\r\n\t\t\treturn 'asc';\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<span className=\"sorting-header\">Sort by</span>\r\n\t\t\t<button className={props.sortType === userOption ? 'sort active-sort' : 'sort non-active-sort' }\r\n\t\t\t\t\tonClick={() => toggleSortMode(userOption, chooseDirection(userOption))}\r\n\t\t\t>\r\n\t\t\t\tname {props.sortType === userOption && <span >{ props.sortDirection \r\n\t\t\t\t\t\t\t\t\t? props.sortDirection === 'asc' \r\n\t\t\t\t\t\t\t\t\t\t? <Emoji label='ascending' symbol='🔺'/>\r\n\t\t\t\t\t\t\t\t\t\t: <Emoji label='descending' symbol='🔻'/>\r\n\t\t\t\t\t\t\t\t\t: ''}\r\n\t\t\t\t\t\t\t</span>}\r\n\t\t\t</button>\r\n\r\n\t\t\t<button className={props.sortType === emailOption ? 'sort active-sort' : 'sort non-active-sort' }\r\n\t\t\t\t\tonClick={() => toggleSortMode(emailOption, chooseDirection(emailOption))}\r\n\t\t\t>\r\n\t\t\t\temail{props.sortType === emailOption && <span >{ props.sortDirection \r\n\t\t\t\t\t\t\t\t\t? props.sortDirection === 'asc' \r\n\t\t\t\t\t\t\t\t\t\t? <Emoji label='ascending' symbol='🔺'/>\r\n\t\t\t\t\t\t\t\t\t\t: <Emoji label='descending' symbol='🔻'/>\r\n\t\t\t\t\t\t\t\t\t: ''}\r\n\t\t\t\t\t\t\t</span>}\r\n\t\t\t</button>\r\n\t\t\t<button onClick={() => toggleSortMode(statusOption, chooseDirection(statusOption))}\r\n\t\t\t\t\tclassName={props.sortType === statusOption ? 'sort active-sort' : 'sort non-active-sort' }\r\n\t\t\t>\r\n\t\t\t\tstatus{props.sortType === statusOption && <span >{ props.sortDirection \r\n\t\t\t\t\t\t\t\t\t? props.sortDirection === 'asc' \r\n\t\t\t\t\t\t\t\t\t\t? <Emoji label='ascending' symbol='🔺'/>\r\n\t\t\t\t\t\t\t\t\t\t: <Emoji label='descending' symbol='🔻'/>\r\n\t\t\t\t\t\t\t\t\t: ''}\r\n\t\t\t\t\t\t\t</span>}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t\r\n\t)\r\n}\r\n\r\n\r\nexport default Sorting;","import React from 'react';\r\nimport edit from './../store/images/edit.png';\r\n\r\nconst Task = (props) => {\r\n\treturn (\r\n\t\t<div className=\"edit\">\r\n\t\t\t<img src={edit} alt=\"edit\"/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Task;","import React, { useState } from 'react';\r\nimport Edit from './Edit.js';\r\n\r\nconst Task = React.memo((props) => {\r\n\tconst [text, setText] = useState(props.text);\r\n\r\n\tconst changeTextBody = (text) => {\r\n\t\tsetText(text);\r\n\t}\r\n\r\n\tconst toggleEditMode = (id) => {\r\n\t\tprops.enterEditMode(props.editModeId === id ? null : id);\r\n\t}\r\n\r\n\tconst handleCLick = (evt) => {\r\n\t\tif (!props.status) {\r\n\t\t\tprops.editTask(props.authToken, props.id, 10, null);\r\n\t\t\tprops.getTasks(props.sortType, props.sortDirection, props.currentPage);\r\n\t\t} else {\r\n\t\t\tprops.editTask(props.authToken, props.id, 0, null);\r\n\t\t\tprops.getTasks(props.sortType, props.sortDirection, props.currentPage);\r\n\t\t}\r\n\r\n\t\treturn props.status ? 'checked' : 'unchecked';\r\n\t}\r\n\r\n\tconst saveChanges = () => {\r\n\t\tprops.editTask(props.authToken, props.id, props.status, text);\r\n\t\ttoggleEditMode(props.id);\r\n\t\tprops.getTasks(props.sortType, props.sortDirection, props.currentPage);\r\n\t}\r\n\t\r\n\tconst findIfEdited = (ids, id) => {\r\n\t\treturn ids.some(el => el === id);\r\n\t}\r\n\r\n\tconst showStatus = (status, isEdited) => {\r\n\t\tif (status && isEdited(props.idsEditedByAdmin, props.id)) {\r\n\t\t\treturn 'edited by admin / complete';\r\n\t\t} else if (status) {\r\n\t\t\treturn 'complete';\r\n\t\t} else if (!status && isEdited(props.idsEditedByAdmin, props.id)) {\r\n\t\t\treturn 'edited by admin / pending';\r\n\t\t} else {\r\n\t\t\treturn 'pending';\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className=\"task\">\r\n\t\t\t<div className=\"task-header\">\r\n\t\t\t\t<h3>Task #{props.id}</h3>\r\n\t\t\t\t{props.isAdmin && <div onClick={() => toggleEditMode(props.id)}>\r\n\t\t\t\t\t<Edit symbol={'✏'}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{props.isAdmin && props.editModeId === props.id \r\n\t\t\t\t\t&& <div className=\"task-header_save\" \r\n\t\t\t\t\t\t\tonClick={() => saveChanges()}>\r\n\t\t\t\t\t<span>save</span>\r\n\t\t\t\t</div>}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"task-info task-username\">\r\n\t\t\t\t<label htmlFor=\"username\">Username:</label>\r\n\t\t\t\t<p>{props.username}</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"task-info task-email\">\r\n\t\t\t\t<label htmlFor=\"email\">Email:</label>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"task-info task-text\">\r\n\t\t\t\t<label htmlFor=\"text\">Text:</label>\r\n\t\t\t\t{props.isAdmin && props.editModeId === props.id \r\n\t\t\t\t\t? <input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tvalue={text} \r\n\t\t\t\t\t\tname=\"text\" \r\n\t\t\t\t\t\tonChange={(event) => changeTextBody(event.target.value)}/>\r\n\t\t\t\t\t: <p>{text}</p>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"task-info task-done\">\r\n\t\t\t\t<label htmlFor=\"status\">Status</label>\r\n\t\t\t\t{props.isAdmin && props.editModeId === props.id\r\n\t\t\t\t\t? <input type=\"checkbox\" name=\"status\" onChange={() => handleCLick()} defaultChecked={!!props.status} />\r\n\t\t\t\t\t: <p>{showStatus(props.status, findIfEdited)}</p>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n});\r\n\r\nexport default Task;","import React, { useEffect } from 'react';\r\nimport Sorting from './Sorting.js';\r\nimport Task from './Task.js';\r\nimport './styles.css';\r\n\r\nconst Tasks = (props) => {\r\n\r\n\tuseEffect(() => {\r\n\t\tprops.getTasks(props.sortType, props.sortDirection, props.currentPage);\r\n\t}, [props.currentPage])\r\n\r\n\tconst changePages = (page) => {\r\n\t\tprops.setCurrentPage(page);\r\n\t}\r\n\r\n\tconst pagesCount = Math.ceil(props.totalTasksCount / props.pageSize);\r\n\tconst pages = [];\r\n\tfor (let i = 1; i <= pagesCount; i++) {\r\n\t\tpages.push(i);\r\n\t}\r\n\tconst tasks = props.tasks.map(el => {\r\n\t\t\t\treturn <Task username={el.username}\r\n\t\t\t\t\t\t\temail={el.email}\r\n\t\t\t\t\t\t\ttext={el.text}\r\n\t\t\t\t\t\t\tstatus={el.status}\r\n\t\t\t\t\t\t\tkey={el.id}\r\n\t\t\t\t\t\t\tid={el.id}\r\n\t\t\t\t\t\t\t{...props}\r\n\t\t\t\t\t\t/>\r\n\t\t\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Sorting { ...props } />\r\n\t\t\t<div className=\"tasksContainer\">\r\n\t\t\t\t{ tasks }\r\n\t\t\t</div>\r\n\t\t\t<div className=\"pages\">\r\n\t\t\t\t{pages.map((el, index) => {\r\n\t\t\t\t\t\treturn <span key={index} \r\n\t\t\t\t\t\t\t\t\tclassName={props.currentPage === el ? 'page-selected' : undefined}\r\n\t\t\t\t\t\t\t\t\tonClick={() => changePages(el)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{el}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default Tasks;","import React from 'react';\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n\tconst hasError = meta.touched && meta.error;\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<textarea {...input} {...props} className={hasError ? 'withError' : undefined}/>\r\n\t\t\t<div>\r\n\t\t\t\t{ hasError && <span className=\"errorMessage\">{meta.error}</span> }\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport const TextInput = ({input, meta, ...props}) => {\r\n\tconst hasError = meta.touched && meta.error;\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input {...input} {...props} \r\n\t\t\t\tclassName={hasError ? 'withError' : undefined}\r\n\t\t\t/>\r\n\t\t\t<div>\r\n\t\t\t\t{ hasError && <span className=\"errorMessage\">{meta.error}</span> }\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}","export const requiredField = (value) => {\r\n\treturn value ? undefined : 'Field is required';\r\n}\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { TextInput } from './FormsControl.js';\r\nimport { requiredField } from './validte.js';\r\n\r\nconst AdminLoginForm = (props) => {\r\n\treturn (\r\n\t\t<form className=\"adminLoginForm\" onSubmit={ props.handleSubmit }>\r\n\t\t<div className=\"adminLoginForm-field adminLoginForm-username\">\r\n\t\t\t<label htmlFor=\"username\">Admin</label>\r\n\t\t\t<Field component={ TextInput } \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tvalue=\"\" \r\n\t\t\t\t\tplaceholder=\"enter your username\" \r\n\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\tvalidate={[requiredField]}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t<div className=\"adminLoginForm-field adminLoginForm-password\">\r\n\t\t\t<label htmlFor=\"password\">Password</label>\r\n\t\t\t<Field component={ TextInput } \r\n\t\t\t\ttype=\"password\" \r\n\t\t\t\tvalue=\"\" \r\n\t\t\t\tplaceholder=\"enter your password\" \r\n\t\t\t\tname=\"password\"\r\n\t\t\t\tvalidate={[requiredField]}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t\t<button className=\"adminLoginForm-loginButton\">login</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst ReduxAdminLoginForm = reduxForm({ form: 'adminLogin' })(AdminLoginForm);\r\n\r\nexport default ReduxAdminLoginForm;\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { Textarea, TextInput } from './FormsControl.js';\r\nimport { requiredField } from './validte.js';\r\n\r\nconst CreateTaskForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={ props.handleSubmit } className=\"createForm\">\r\n\t\t\t<h2>Create new task</h2>\r\n\t\t\t<div className=\"createForm-field createForm-user\">\r\n\t\t\t\t<label htmlFor=\"username\">Username</label>\r\n\t\t\t\t<Field component={ TextInput } \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tvalue=\"\" \r\n\t\t\t\t\t\tplaceholder=\"enter your username\" \r\n\t\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\t\tvalidate={[requiredField]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"createForm-field createForm-email\">\r\n\t\t\t\t<label htmlFor=\"email\">Email</label>\r\n\t\t\t\t<Field \r\n\t\t\t\t\tcomponent={ TextInput } \r\n\t\t\t\t\ttype=\"email\" \r\n\t\t\t\t\tvalue=\"\" \r\n\t\t\t\t\tplaceholder=\"enter your email\" \r\n\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\tvalidate={[requiredField]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"createForm-field createForm-text\">\r\n\t\t\t\t<label htmlFor=\"text\">Your text</label>\r\n\t\t\t\t<Field \r\n\t\t\t\t\tcomponent={ Textarea } \r\n\t\t\t\t\tplaceholder=\"enter your text\" \r\n\t\t\t\t\tname=\"text\" \r\n\t\t\t\t\tvalidate={[requiredField]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<button>create</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst ReduxCreateTaskForm = reduxForm({\tform: 'createTask' })(CreateTaskForm);\r\n\r\nexport default ReduxCreateTaskForm;","import React from 'react';\r\nimport './styles.css';\r\nimport Tasks from './Tasks.js';\r\nimport AdminLoginForm from './AdminLoginForm.js';\r\nimport ReduxCreateTaskForm from './CreateTaskForm.js';\r\n\r\nconst StartingPage = (props) => {\r\n\r\n\tconst onCreateSubmit = (formData) => {\r\n\t\tprops.createNewTask(formData);\r\n\t\tprops.getTasks(null, null, props.currentPage);\r\n\t}\r\n\r\n\tconst onLoginSubmit = (formData) => {\r\n\t\tprops.logAsAdmin(formData);\r\n\t}\r\n\treturn (\r\n\t\t<main className=\"tasksPage\">\r\n\t\t\t{props.isAdmin \r\n\t\t\t\t? <div className=\"admin-log-out\">\r\n\t\t\t\t\t<span onClick={props.exitAdminMode}>Log out</span>\r\n\t\t\t\t  </div>\r\n\t\t\t\t: <div className=\"adminLoginFormContainer\">\r\n\t\t\t\t\t<AdminLoginForm onSubmit={ onLoginSubmit }/>\r\n\t\t\t\t\t<span onClick={props.closeMessages} className=\"showMessage\">{props.feedbackOnAdminLogIn}</span>\r\n\t\t\t\t  </div>\r\n\t\t\t}\r\n\t\t\t<div className=\"createFormContainer\">\r\n\t\t\t\t<ReduxCreateTaskForm onSubmit={ onCreateSubmit }/>\r\n\t\t\t\t<span onClick={props.closeMessages} className=\"showMessage\">{props.feedbackOnCreation}</span>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"tasksContainer\">\r\n\t\t\t\t<h1>Tasks</h1>\r\n\t\t\t\t<Tasks {...props}/>\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t)\r\n}\r\n\r\nexport default StartingPage;","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://uxcandy.com/~shapoval/test-task-backend/v2/'\r\n});\r\n\r\nconst developer = `?developer=Alex?`;\r\n\r\nexport const tasksAPI = {\r\n\tfetchTasks(sortField, sortDirection = 'asc', page = 1) {\r\n\t\tif (sortField) {\r\n\t\t\treturn instance.get(`${developer}&sort_field=${sortField}&sort_direction=${sortDirection}&page=${page}`)\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\treturn response\r\n\t\t\t\t})\r\n\t\t} else {\r\n\t\t\treturn instance.get(`${developer}&sort_direction=${sortDirection}&page=${page}`)\r\n\t\t\t\t.then(response => response);\r\n\t\t}\r\n\t},\r\n\r\n\tcreateTask(data) {\r\n\t\tlet form = new FormData();\r\n\t\tform.append(\"username\", data.username);\r\n        form.append(\"email\", data.email);\r\n        form.append(\"text\", data.text);\r\n\t\treturn instance.post(`create${developer}`, form)\t\t\t\r\n\t\t\t.then(res => {\r\n\t\t\t\treturn res.data;\r\n\t\t\t})\r\n\t},\r\n\r\n\tlogIn(data) {\r\n\t\tlet form = new FormData();\r\n\t\tform.append(\"username\", data.username);\r\n        form.append(\"password\", data.password);\r\n\t\treturn instance.post(`login${developer}`, form)\t\t\t\r\n\t\t\t.then(res => {\r\n\t\t\t\treturn res.data;\r\n\t\t\t})\r\n\t},\r\n\r\n\teditTask(token, id, status, text) {\r\n\t\tlet form = new FormData();\r\n\t\tform.append(\"token\", token);\r\n\t\ttext && form.append(\"text\", text);\r\n\t\tform.append(\"status\", status);\r\n\t\treturn instance.post(`/edit/${id}${developer}`, form);\t\r\n\t}\r\n}\r\n","import { tasksAPI } from './../../api/api.js';\r\n\r\nconst DISPLAY_TASKS = 'DISPLAY_TASKS';\r\nconst SET_TOTAL_TASKS_COUNT = 'SET_TOTAL_TASKS_COUNT';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst ENTER_ADMIN_MODE = 'ENTER_ADMIN_MODE';\r\nconst EXIT_ADMIN_MODE = 'EXIT_ADMIN_MODE';\r\nconst ENTER_EDIT_MODE = 'ENTER_EDIT_MODE';\r\nconst SAVE_SORT = 'SAVE_SORT';\r\nconst SET_AUTH_TOKEN = 'SET_AUTH_TOKEN';\r\nconst SHOW_FEEDBACK_ON_CREATION = 'SHOW_FEEDBACK_ON_CREATION';\r\nconst SHOW_FEEDBACK_ON_ADMIN_LOG_IN = 'SHOW_FEEDBACK_ON_ADMIN_LOG_IN';\r\nconst CLOSE_MESSAGES = 'CLOSE_MESSAGES';\r\nconst ADD_TO_EDITED_IDS = 'ADD_TO_EDITED_IDS';\r\n\r\nconst findObjectById = (array, id) => {\r\n\tlet index = null;\r\n\tarray.forEach((el, arrIndex) => {\r\n\t\tif (el.id === id) index = arrIndex;\r\n\t})\r\n\treturn index;\r\n}\r\n\r\nconst saveInLocalStorage = (data, stringName) => {\r\n\tlocalStorage.setItem(stringName, data);\r\n}\r\n\r\nconst getFromLocalStorage = (stringName) => {\r\n\treturn localStorage.getItem(stringName) === 'true';\r\n}\r\n\r\nconst initialState = {\r\n\ttasks: [],\r\n\tpageSize: 3,\r\n\ttotalTasksCount: 0,\r\n\tcurrentPage: 1,\r\n\tisAdmin: getFromLocalStorage('isAdmin') || false,\r\n\teditModeId: null,\r\n\tsortType: null,\r\n\tsortDirection: null,\r\n\tauthToken: null,\r\n\tfeedbackOnCreation: null,\r\n\tfeedbackOnAdminLogIn: null,\r\n\tidsEditedByAdmin: []\r\n};\r\n\r\nconst tasksReducer = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase DISPLAY_TASKS: {\r\n\t\t\treturn {...state, tasks: [...action.tasks]};\r\n\t\t}\r\n\t\tcase SET_TOTAL_TASKS_COUNT: {\r\n\t\t\treturn {...state, totalTasksCount: action.tasksCount};\r\n\t\t}\r\n\t\tcase SET_CURRENT_PAGE: {\r\n\t\t\treturn {...state, currentPage: action.page};\r\n\t\t}\r\n\t\tcase ENTER_ADMIN_MODE: {\r\n\t\t\tconst stateCopy = {...state};\r\n\t\t\tstateCopy.isAdmin = action.adminLoggedIn;\r\n\t\t\tsaveInLocalStorage('true', 'isAdmin');\r\n\t\t\treturn stateCopy;\r\n\t\t}\r\n\t\tcase EXIT_ADMIN_MODE: {\r\n\t\t\tconst stateCopy = {...state};\r\n\t\t\tstateCopy.isAdmin = false;\r\n\t\t\tstateCopy.authToken = null;\r\n\t\t\tsaveInLocalStorage('false', 'isAdmin');\r\n\t\t\treturn stateCopy;\r\n\t\t}\r\n\t\tcase ENTER_EDIT_MODE: {\r\n\t\t\treturn {...state, editModeId: action.editModeId};\r\n\t\t}\r\n\t\tcase SAVE_SORT: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsortType: action.sortType,\r\n\t\t\t\tsortDirection: action.sortDirection\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase SET_AUTH_TOKEN:\r\n\t\t\treturn {...state, authToken: action.authToken};\r\n\t\tcase SHOW_FEEDBACK_ON_CREATION: {\r\n\t\t\treturn {...state, feedbackOnCreation: action.feedback};\r\n\t\t}\r\n\t\tcase SHOW_FEEDBACK_ON_ADMIN_LOG_IN: {\r\n\t\t\treturn {...state, feedbackOnAdminLogIn: action.feedback};\r\n\t\t}\r\n\t\tcase CLOSE_MESSAGES: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tfeedbackOnCreation: null,\r\n\t\t\t\tfeedbackOnAdminLogIn: null,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase ADD_TO_EDITED_IDS: {\r\n\t\t\tconst stateCopy = {...state};\r\n\t\t\tstateCopy.tasks = [...state.tasks];\r\n\t\t\tstateCopy.idsEditedByAdmin = [...state.idsEditedByAdmin];\r\n\t\t\tconst index = findObjectById(stateCopy.tasks, action.id);\r\n\t\t\tif (action.text !== stateCopy.tasks[index].text) {\r\n\t\t\t\tif (!stateCopy.idsEditedByAdmin.some(el => el === action.id)) {\r\n\t\t\t\t\tstateCopy.idsEditedByAdmin.push(action.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn stateCopy;\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst displayTasks = (tasks) => ({type: DISPLAY_TASKS, tasks});\r\nconst setTotalTasksCount = (tasksCount) => ({type: SET_TOTAL_TASKS_COUNT, tasksCount});\r\nconst enterAdminMode = (adminLoggedIn) => ({type: ENTER_ADMIN_MODE, adminLoggedIn});\r\nconst setAuthToken = (authToken) => ({type: SET_AUTH_TOKEN, authToken});\r\nconst showFeedbackOnCreation = (feedback) => ({type: SHOW_FEEDBACK_ON_CREATION, feedback});\r\nconst showFeedbackOnAdminLogIn = (feedback) => ({type: SHOW_FEEDBACK_ON_ADMIN_LOG_IN, feedback});\r\nconst addToEditedIds = (id, text) => ({type: ADD_TO_EDITED_IDS, id, text});\r\nexport const enterEditMode = (editModeId) => ({type: ENTER_EDIT_MODE, editModeId});\r\nexport const saveSort = (sortType, sortDirection) => ({type: SAVE_SORT, sortType, sortDirection});\r\nexport const exitAdminMode = () => ({type: EXIT_ADMIN_MODE});\r\nexport const closeMessages = () => ({type: CLOSE_MESSAGES});\r\n\r\nexport const getTasks = (sortField, sortDirection, page) => {\r\n  return (dispatch) => {\r\n    tasksAPI.fetchTasks(sortField, sortDirection, page)\r\n    \t.then(res => {\r\n    \t\tdispatch(displayTasks(res.data.message.tasks));\r\n    \t\tdispatch(setTotalTasksCount(res.data.message.total_task_count));\r\n    \t});\r\n\t}\r\n};\r\n\r\nexport const createNewTask = (formData) => {\r\n\treturn (dispatch) => { \r\n\t\ttasksAPI.createTask(formData)\r\n\t\t\t.then(result => {\r\n\t\t\t\tresult.status === 'ok' \r\n\t\t\t\t\t? dispatch(showFeedbackOnCreation('A new task has been created!'))\r\n\t\t\t\t\t: dispatch(showFeedbackOnCreation('Invalid email'));\r\n\t\t\t});\r\n\t};\r\n}\r\n\r\nexport const logAsAdmin = (formData) => {\r\n\treturn (dispatch) => {\r\n\t\ttasksAPI.logIn(formData)\r\n\t\t\t.then(result => {\r\n\t\t\t\tif (result.status === 'ok') {\r\n\t\t\t\t\tdispatch(enterAdminMode(true));\r\n\t\t\t\t\tdispatch(setAuthToken(result.message.token));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdispatch(enterAdminMode(false));\r\n\t\t\t\t\tdispatch(showFeedbackOnAdminLogIn('Wrong password or login'))\r\n\t\t\t\t} \r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nexport const editTask = (token, id, status, text) => {\r\n\treturn (dispatch) => {\r\n\t\tif (text) dispatch(addToEditedIds(id, text));\r\n\t\ttasksAPI.editTask(token, id, status, text);\r\n\t}\r\n}\r\n\r\nexport const setCurrentPage = (page) => ({type: SET_CURRENT_PAGE, page});\r\n\r\nexport default tasksReducer;","import {connect} from \"react-redux\";\r\nimport StartingPage from \"./StartingPage.js\";\r\nimport {\r\n\tgetTasks,\r\n\tsetCurrentPage,\r\n\tlogAsAdmin,\r\n\tenterEditMode,\r\n    exitAdminMode,\r\n\tsaveSort,\r\n    editTask,\r\n    createNewTask,\r\n    closeMessages\r\n}  from \"./../store/reducers/tasksReducer.js\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasksPage.tasks,\r\n        pageSize: state.tasksPage.pageSize,\r\n        totalTasksCount: state.tasksPage.totalTasksCount,\r\n        currentPage: state.tasksPage.currentPage,\r\n        isAdmin: state.tasksPage.isAdmin,\r\n        editModeId: state.tasksPage.editModeId,\r\n        sortType: state.tasksPage.sortType,\r\n        sortDirection: state.tasksPage.sortDirection,\r\n        authToken: state.tasksPage.authToken,\r\n        feedbackOnCreation: state.tasksPage.feedbackOnCreation,\r\n        feedbackOnAdminLogIn: state.tasksPage.feedbackOnAdminLogIn,\r\n        idsEditedByAdmin: state.tasksPage.idsEditedByAdmin\r\n    }\r\n};\r\n\r\nconst StartingPageContainer = connect(mapStateToProps, \r\n\t{ getTasks, setCurrentPage, logAsAdmin, \r\n        enterEditMode, exitAdminMode, saveSort,\r\n        editTask, createNewTask, closeMessages })(StartingPage);\r\n\r\n\r\nexport default StartingPageContainer;","import React from 'react';\nimport './App.css';\nimport StartingPageContainer from './components/StartingPageContainer.js';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <StartingPageContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport tasksReducer from \"./reducers/tasksReducer.js\";\r\n\r\nconst reducers = combineReducers(\r\n\t{\r\n\t\tform: formReducer,\r\n\t\ttasksPage: tasksReducer\r\n\t}\r\n)\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n\t\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store.js';\n\nReactDOM.render(\n\t<Provider store={ store }>\n\t\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/edit.39dab33f.png\";"],"sourceRoot":""}